@page "/projects"
@using Core.Interfaces.Services
@using Web.Services
@inject TitleService titleService
@inject CacheService cacheService
@inject IProjectService projectService

<MudTable Items="@projects" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@loading" LoadingProgressColor="Color.Info" CustomHeader="true">
    <HeaderContent>
        <MudTHeadRow IgnoreCheckbox="true" Class="header-centered">
            <MudTh colspan="3">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="ButtonOnClick" Disabled="@loading">Load Projects</MudButton>
            </MudTh>
        </MudTHeadRow>
        <MudTHeadRow Class="header-centered">
            <MudTh>Name</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Tags</MudTh>
        </MudTHeadRow>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd DataLabel="Tags">@string.Join(',', context.Tags)</MudTd>
    </RowTemplate>
</MudTable>

@code {
    private List<Core.Models.Project> projects = [];
    private bool loading;

    protected override async Task OnInitializedAsync()
    {
        await LoadProjects();

        await base.OnInitializedAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        titleService.SetTitle("Projects");
        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task ButtonOnClick()
    {
        await LoadProjects();
    }

    private async Task LoadProjects()
    {
        loading = true;
        var cachedProjects = await cacheService.GetOrSetAsync("projects", async () => await projectService.GetProjectsAsync(default), TimeSpan.FromSeconds(5));
        projects = cachedProjects ?? [];
        loading = false;
    }
}